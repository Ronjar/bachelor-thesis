data <- data %>%
filter(gender != "other")
# Konvertiere alle Frage-Spalten in logicals
question_columns <- grep("^r[1-3]_q[1-20]?", colnames(data), value = TRUE)
data <- data %>%
mutate(across(all_of(question_columns), ~ .x == "true"))
# Identifiziere die Frage-Spalten für jede Runde
question_columns_r1 <- grep("^r1_q[1-20]?", colnames(data), value = TRUE)
question_columns_r2 <- grep("^r2_q[1-20]?", colnames(data), value = TRUE)
question_columns_r3 <- grep("^r3_q[1-20]?", colnames(data), value = TRUE)
# Berechne den Anteil der richtig beantworteten Fragen pro Runde
data <- data %>%
rowwise() %>%
mutate(
correct_percentage_r1 = mean(c_across(all_of(question_columns_r1)) == TRUE, na.rm = TRUE),
correct_percentage_r2 = mean(c_across(all_of(question_columns_r2)) == TRUE, na.rm = TRUE),
correct_percentage_r3 = mean(c_across(all_of(question_columns_r3)) == TRUE, na.rm = TRUE)
) %>%
ungroup()
# Identifiziere Nutzer, bei denen in einer der Runden die korrekte Antwortrate von weniger als 25% erreicht wird
users_to_remove <- data %>%
filter(correct_percentage_r1 < 0.25 | correct_percentage_r2 < 0.25 | correct_percentage_r3 < 0.25) %>%
pull(id) %>%
unique()
# Filtere alle Datensätze dieser Nutzer heraus
cleaned_data <- data %>%
filter(!(id %in% users_to_remove)) %>%
select(-starts_with("correct_percentage"))  # Entferne die Hilfsspalten
# Spalten "gender" und "r*_gamifiedElement" in Faktoren umwandeln
gamified_columns <- grep("^r[0-9]+_gamifiedElement", colnames(cleaned_data), value = TRUE)
cleaned_data <- cleaned_data %>%
mutate(
gender = as.factor(gender),
across(all_of(gamified_columns), as.factor)
)
view(cleanded_data)
view(cleaned_data)
library(tidyverse)
# Define the URL and the file path -----------------------------------
url <- "https://gender.robingebert.com/csv"
file_path <- "gender_data.csv"
# Download the CSV file ----------------------------------------------
download.file(url, destfile = file_path, method = "auto")
# Read the CSV file --------------------------------------------------
data <- read.csv2(file_path)
# Entferne alle Datensätze, bei denen das Geschlecht 'other' ist
data <- data %>%
filter(gender != "other")
# Konvertiere alle Frage-Spalten in logicals
question_columns <- grep("^r[1-3]_q[1-20]?", colnames(data), value = TRUE)
data <- data %>%
mutate(across(all_of(question_columns), ~ .x == "true"))
# Identifiziere die Frage-Spalten für jede Runde
question_columns_r1 <- grep("^r1_q[1-20]?", colnames(data), value = TRUE)
question_columns_r2 <- grep("^r2_q[1-20]?", colnames(data), value = TRUE)
question_columns_r3 <- grep("^r3_q[1-20]?", colnames(data), value = TRUE)
# Berechne den Anteil der richtig beantworteten Fragen pro Runde
data <- data %>%
rowwise() %>%
mutate(
correct_percentage_r1 = mean(c_across(all_of(question_columns_r1)) == TRUE, na.rm = TRUE),
correct_percentage_r2 = mean(c_across(all_of(question_columns_r2)) == TRUE, na.rm = TRUE),
correct_percentage_r3 = mean(c_across(all_of(question_columns_r3)) == TRUE, na.rm = TRUE)
) %>%
ungroup()
# Identifiziere Nutzer, bei denen in einer der Runden die korrekte Antwortrate von weniger als 25% erreicht wird
users_to_remove <- data %>%
filter(correct_percentage_r1 < 0.25 | correct_percentage_r2 < 0.25 | correct_percentage_r3 < 0.25) %>%
pull(id) %>%
unique()
# Filtere alle Datensätze dieser Nutzer heraus
cleaned_data <- data %>%
filter(!(id %in% users_to_remove)) %>%
select(-starts_with("correct_percentage"))  # Entferne die Hilfsspalten
# Umformen der Daten
long_data <- daten %>%
gather(key = "dataset", value = "value", starts_with("r1_"), starts_with("r2_"), starts_with("r3_"))
# Umformen der Daten
long_data <- cleaned_data %>%
gather(key = "dataset", value = "value", starts_with("r1_"), starts_with("r2_"), starts_with("r3_"))
view(long_data)
daten_lang <- cleaned_data %>%
pivot_longer(
cols = starts_with("r"),
names_to = "dataset",
names_pattern = "(r[1-3])_(.*)",
values_to = "value"
) %>%
arrange(id, dataset)
df_long <- cleaned_data %>%
pivot_longer(
cols = starts_with("r_"),
names_to = "dataset",
values_to = "value"
)
df_long <- cleaned_data %>%
pivot_longer(
cols = starts_with("r"),
names_to = "dataset",
values_to = "value"
)
## ---------------------------
## Script name: dataPreProcessing.R
##
## Author: Nadine N. Koch
##
## Date Created: 04.07.2024
## ---------------------------
##
## Input: "gender_data.csv§
##
##
## Output: "dataGenderPreProcessed.txt"
##
## ---------------------------
##
## necessary packages
library(tidyverse)
## ------------ optional: set working directory ---------------
# please fill in the directory of the scripts here
# please uncomment the following lines
path <- "C:\\Users\\robin\\Documents\\GitHub\\bachelor-thesis\\study"
# set working directory
setwd(path)
# Define the URL and the file path -----------------------------------
#url <- "https://gender.robingebert.com/csv"
# Download the CSV file ----------------------------------------------
#download.file(url, destfile = "gender_data.csv", method = "auto")
#------------ read in data ---------------
data_wide <- read.csv2("gender_data.csv", na.strings = "")
#------------ reshape to long ---------------
data <- data_wide %>%
pivot_longer(
cols = starts_with("r"),
names_to = c("round", ".value"),
names_pattern = "r(\\d+)_(.*)"
) %>%
mutate(round = as.integer(round))
# convert back to data frame
data <- as.data.frame(data)
#------------ recode, clean and convert to logical or factor ---------------
# recode NA to none
data$gamifiedElement[is.na(data$gamifiedElement)] <- "none"
# remove missing data sets
data <- na.omit(data)
# Convert questions to logicals
question_columns <- grep("q[1-20]?", colnames(data), value = TRUE)
data <- data %>%
mutate_at(question_columns, list(~as.logical(.)))
# convert gender and gamifiedElement to factor
data$gender <- factor(data$gender)
data$gamifiedElement <- factor(data$gamifiedElement)
#------------ calculate scale values ---------------
#------------ performance ---------------
# get columns with questions
question_columns <- grep("q[1-20]?", colnames(data), value = TRUE)
# calculate number of correct items and percentage
data$nr_correct <- rowSums(data[,names(data) %in% question_columns]*1)
data$percentage_correct <- data$nr_correct/20
#------------ self efficacy ---------------
# mean od ngse items
ngse_columns <- grep("ngse_[1-20]?", colnames(data), value = TRUE)
data$ngse <- rowMeans(data[,names(data) %in% ngse_columns])
#------------ motivation ---------------
# mean of SIMS scales
sims_columns <- grep("sims_[1-20]?", colnames(data), value = TRUE)
data$sims_intr_mot <- rowMeans(data[,names(data) %in% c("sims_1", "sims_5",
"sims_9", "sims_13")])
data$sims_ident_reg <- rowMeans(data[,names(data) %in% c("sims_2", "sims_6",
"sims_10", "sims_14")])
data$sims_ext_reg <- rowMeans(data[,names(data) %in% c("sims_3", "sims_7",
"sims_11", "sims_15")])
data$sims_amot <- rowMeans(data[,names(data) %in% c("sims_4", "sims_8",
"sims_12", "sims_16")])
#------------ anxiety ---------------
# weightsfor each answer:
# first number "not at all", second number "somewhat",
# thrid number "moderately", forth number "very much"
item1 <- c(2.66, 0.60, -1.41, -3.55)
item2 <- c(-2.9, -0.76, 1.25, 3.31)
item3 <- c(-1.27, 0.87, 2.88, 4.94)
item4 <- c(4.09, 0.01, -2.00, -4.14)
item5 <- c(2.25, 0.19, -1.82,-3.96)
item6 <- c(-2.95, -0.81, 1.2, 3.26)
# weights according to the answers
data$stai_1_weight <- item1[data[,c("stai_1")]]
data$stai_2_weight <- item2[data[,c("stai_2")]]
data$stai_3_weight <- item3[data[,c("stai_3")]]
data$stai_4_weight <- item4[data[,c("stai_4")]]
data$stai_5_weight <- item5[data[,c("stai_5")]]
data$stai_6_weight <- item6[data[,c("stai_6")]]
# get stai-y value
stai_columns <- grep("stai_[1-20]?", colnames(data), value = TRUE)
stai_weight_columns <- grep("stai_[1-20]?_weight", colnames(data), value = TRUE)
data$stai <- rowMeans(data[,names(data) %in% stai_columns])
#------------ write external table with relevant data ---------------
write.table(data[,!names(data) %in% c(ngse_columns, sims_columns,
stai_columns, stai_weight_columns)],
"dataGenderPreProcessed.txt", quote = FALSE,
sep = "\t", row.names = FALSE)
## ---------------------------
## Script name: dataPreProcessing.R
##
## Author: Nadine N. Koch
##
## Date Created: 04.07.2024
## ---------------------------
##
## Input: "gender_data.csv§
##
##
## Output: "dataGenderPreProcessed.txt"
##
## ---------------------------
##
## necessary packages
library(tidyverse)
## ------------ optional: set working directory ---------------
# please fill in the directory of the scripts here
# please uncomment the following lines
path <- "C:\\Users\\robin\\Documents\\GitHub\\bachelor-thesis\\study"
# set working directory
setwd(path)
# Define the URL and the file path -----------------------------------
#url <- "https://gender.robingebert.com/csv"
# Download the CSV file ----------------------------------------------
#download.file(url, destfile = "gender_data.csv", method = "auto")
#------------ read in data ---------------
data_wide <- read.csv2("gender_data.csv", na.strings = "")
#------------ reshape to long ---------------
data <- data_wide %>%
pivot_longer(
cols = starts_with("r"),
names_to = c("round", ".value"),
names_pattern = "r(\\d+)_(.*)"
) %>%
mutate(round = as.integer(round))
# convert back to data frame
data <- as.data.frame(data)
#------------ recode, clean and convert to logical or factor ---------------
# recode NA to none
data$gamifiedElement[is.na(data$gamifiedElement)] <- "none"
# remove missing data sets
data <- na.omit(data)
# Convert questions to logicals
question_columns <- grep("q[1-20]?", colnames(data), value = TRUE)
data <- data %>%
mutate_at(question_columns, list(~as.logical(.)))
# convert gender and gamifiedElement to factor
data$gender <- factor(data$gender)
data$gamifiedElement <- factor(data$gamifiedElement)
#------------ calculate scale values ---------------
#------------ performance ---------------
# get columns with questions
question_columns <- grep("q[1-20]?", colnames(data), value = TRUE)
# calculate number of correct items and percentage
data$nr_correct <- rowSums(data[,names(data) %in% question_columns]*1)
data$percentage_correct <- data$nr_correct/20
#------------ self efficacy ---------------
# mean od ngse items
ngse_columns <- grep("ngse_[1-20]?", colnames(data), value = TRUE)
data$ngse <- rowMeans(data[,names(data) %in% ngse_columns])
#------------ motivation ---------------
# mean of SIMS scales
sims_columns <- grep("sims_[1-20]?", colnames(data), value = TRUE)
data$sims_intr_mot <- rowMeans(data[,names(data) %in% c("sims_1", "sims_5",
"sims_9", "sims_13")])
data$sims_ident_reg <- rowMeans(data[,names(data) %in% c("sims_2", "sims_6",
"sims_10", "sims_14")])
data$sims_ext_reg <- rowMeans(data[,names(data) %in% c("sims_3", "sims_7",
"sims_11", "sims_15")])
data$sims_amot <- rowMeans(data[,names(data) %in% c("sims_4", "sims_8",
"sims_12", "sims_16")])
#------------ anxiety ---------------
# weightsfor each answer:
# first number "not at all", second number "somewhat",
# thrid number "moderately", forth number "very much"
item1 <- c(2.66, 0.60, -1.41, -3.55)
item2 <- c(-2.9, -0.76, 1.25, 3.31)
item3 <- c(-1.27, 0.87, 2.88, 4.94)
item4 <- c(4.09, 0.01, -2.00, -4.14)
item5 <- c(2.25, 0.19, -1.82,-3.96)
item6 <- c(-2.95, -0.81, 1.2, 3.26)
# weights according to the answers
data$stai_1_weight <- item1[data[,c("stai_1")]]
data$stai_2_weight <- item2[data[,c("stai_2")]]
data$stai_3_weight <- item3[data[,c("stai_3")]]
data$stai_4_weight <- item4[data[,c("stai_4")]]
data$stai_5_weight <- item5[data[,c("stai_5")]]
data$stai_6_weight <- item6[data[,c("stai_6")]]
# get stai-y value
stai_columns <- grep("stai_[1-20]?", colnames(data), value = TRUE)
stai_weight_columns <- grep("stai_[1-20]?_weight", colnames(data), value = TRUE)
data$stai <- rowMeans(data[,names(data) %in% stai_columns])
#------------ write external table with relevant data ---------------
write.table(data[,!names(data) %in% c(ngse_columns, sims_columns,
stai_columns, stai_weight_columns)],
"dataGenderPreProcessed.txt", quote = FALSE,
sep = "\t", row.names = FALSE)
## ---------------------------
## Script name: .R
##
## Author: Nadine N. Koch, Robin Gebert
##
## Date Created: 04.07.2024
## ---------------------------
##
## Input: "dataGenderPreProcessed.txt"
##
##
## Output:
##
## ---------------------------
##
## necessary packages
library(lmerTest)
#library(robustlmm)
library(sjPlot)
#library(ez)
library("car")
## ------------ optional: set working directory ---------------
# please fill in the directory of the scripts here
# please uncomment the following lines
#path <- "Documents/Lehre/Betreuung Arbeiten/Robin/"
# set working directory
#setwd(path)
se <- function(x){
return(sd(x)/sqrt(length(x)))
}
## ------------ read in data set ---------------
dat_gender_All <-
read.table("C:\\Users\\robin\\Downloads\\dataGenderPreProcessed.txt",
header = TRUE,
sep = "\t")
## ------------ remove data ---------------
# number of participants (each has 3 data sets)
length(dat_gender_All$id) / 3
# remove others
dat_gender_without_other <-
dat_gender_All[dat_gender_All$gender != "other", ]
# number of participants (each has 3 data sets)
length(dat_gender_without_other$id) / 3
# remove lines with less than 25% of correct answers
## remove complete participant or only the condition?
remove_id <-
dat_gender_without_other$id[dat_gender_without_other$percentage_correct < 0.25]
dat_gender <-
dat_gender_without_other[!dat_gender_without_other$id %in% remove_id, ]
# number of participants (each has 3 data sets)
length(dat_gender$id) / 3
# convert gender and gamifiedElement to factor
dat_gender$gender <- factor(dat_gender$gender)
dat_gender$gamifiedElement <- factor(dat_gender$gamifiedElement,
levels = c("none", "p", "b", "l", "a",
"n", "pbla", "pblan"))
# Umbenennen der Faktoren für 'gamifiedElement'
levels(dat_gender$gamifiedElement) <- c("None", "Points (P)", "Badges (B)", "Leaderboards (L)", "Avatars (A)", "Narrative Content (N)", "Combination (PBLA)", "All Elements (PBLAN)")
dat_gender$id <- factor(dat_gender$id)
dat_gender$round <- factor(dat_gender$round)
## ------------ tables, means and sds ---------------
## ------------ LMMs ---------------
# ------------ performance ---------------
lmer_per <-
lmerTest::lmer(
percentage_correct ~ gender * gamifiedElement + (1 | id),
dat_gender,
REML = TRUE,
control = lmerControl(optimizer = "Nelder_Mead")
)
aggregate(percentage_correct ~ gender, dat_gender, mean)
aggregate(percentage_correct ~ gamifiedElement, dat_gender, mean)
sjPlot::tab_model(
lmer_per,
show.intercept = FALSE,
show.est = TRUE,
show.ci = 0.95,
show.std = "std",
show.se = TRUE,
show.stat = TRUE,
show.p = TRUE,
p.adjust = "BH",
show.df = TRUE,
show.r2 = TRUE,
show.obs = TRUE,
digits = 2,
df.method = "satterthwaite"
)
# ------------------------------ Anxiety ------------------------------------------------
lmer_stai <- lmerTest::lmer(
stai ~ gender * gamifiedElement + (1 | id),
dat_gender,
REML = TRUE,
control = lmerControl(optimizer = "Nelder_Mead")
)
sjPlot::tab_model(
lmer_stai,
show.intercept = FALSE,
show.est = TRUE,
show.ci = 0.95,
show.std = "std",
show.se = TRUE,
show.stat = TRUE,
show.p = TRUE,
p.adjust = "BH",
show.df = TRUE,
show.r2 = TRUE,
show.obs = TRUE,
digits = 2,
df.method = "satterthwaite"
)
sjPlot::tab_model(
lmer_stai,
show.intercept = FALSE,
show.est = TRUE,
show.ci = 0.95,
show.std = "std",
show.se = TRUE,
show.stat = TRUE,
show.p = TRUE,
p.adjust = "BH",
show.df = TRUE,
show.r2 = TRUE,
show.obs = TRUE,
digits = 2,
df.method = "satterthwaite",
file = "test.pdf"
)
sjPlot::tab_model(
lmer_stai,
show.intercept = FALSE,
show.est = TRUE,
show.ci = 0.95,
show.std = "std",
show.se = TRUE,
show.stat = TRUE,
show.p = TRUE,
p.adjust = "BH",
show.df = TRUE,
show.r2 = TRUE,
show.obs = TRUE,
digits = 2,
df.method = "satterthwaite",
file = "test.png"
)
setwd("C:/Users/robin/Downloads")
aggregate(percentage_correct ~ gender, dat_gender, mean)
dat_gender_All <-
read.table("C:\\Users\\robin\\Downloads\\dataGenderPreProcessed.txt",
header = TRUE,
sep = "\t")
## ---------------------------
## Script name: .R
##
## Author: Nadine N. Koch
##
## Date Created: 04.07.2024
## ---------------------------
##
## Input: "dataGenderPreProcessed.txt"
##
##
## Output:
##
## ---------------------------
##
## necessary packages
library(lmerTest)
#library(robustlmm)
library(sjPlot)
#library(ez)
library("car")
## ------------ optional: set working directory ---------------
# please fill in the directory of the scripts here
# please uncomment the following lines
#path <- "Documents/Lehre/Betreuung Arbeiten/Robin/"
# set working directory
#setwd(path)
se <- function(x){
return(sd(x)/sqrt(length(x)))
}
## ------------ read in data set ---------------
dat_gender_All <-
read.table("C:\\Users\\robin\\Downloads\\dataGenderPreProcessed.txt",
header = TRUE,
sep = "\t")
## ------------ remove data ---------------
# number of participants (each has 3 data sets)
length(dat_gender_All$id) / 3
# remove others
dat_gender_without_other <-
dat_gender_All[dat_gender_All$gender != "other", ]
# number of participants (each has 3 data sets)
length(dat_gender_without_other$id) / 3
# remove lines with less than 25% of correct answers
## remove complete participant or only the condition?
remove_id <-
dat_gender_without_other$id[dat_gender_without_other$percentage_correct < 0.25]
dat_gender <-
dat_gender_without_other[!dat_gender_without_other$id %in% remove_id, ]
# number of participants (each has 3 data sets)
length(dat_gender$id) / 3
# convert gender and gamifiedElement to factor
dat_gender$gender <- factor(dat_gender$gender)
dat_gender$gamifiedElement <- factor(dat_gender$gamifiedElement,
levels = c("none", "p", "b", "l", "a",
"n", "pbla", "pblan"))
# Umbenennen der Faktoren für 'gamifiedElement'
levels(dat_gender$gamifiedElement) <- c("None", "Points (P)", "Badges (B)", "Leaderboards (L)", "Avatars (A)", "Narrative Content (N)", "Combination (PBLA)", "All Elements (PBLAN)")
dat_gender$id <- factor(dat_gender$id)
dat_gender$round <- factor(dat_gender$round)
aggregate(percentage_correct ~ gender, dat_gender, mean)
aggregate(percentage_correct ~ gamifiedElement, dat_gender, mean)
