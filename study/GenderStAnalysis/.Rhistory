#------------ performance ---------------
# get columns with questions
question_columns <- grep("q[1-20]?", colnames(data), value = TRUE)
# calculate number of correct items and percentage
data$nr_correct <- rowSums(data[,names(data) %in% question_columns]*1)
data$percentage_correct <- data$nr_correct/20
#------------ self efficacy ---------------
# mean od ngse items
ngse_columns <- grep("ngse_[1-20]?", colnames(data), value = TRUE)
data$ngse <- rowMeans(data[,names(data) %in% ngse_columns])
#------------ motivation ---------------
# mean of SIMS scales
sims_columns <- grep("sims_[1-20]?", colnames(data), value = TRUE)
data$sims_intr_mot <- rowMeans(data[,names(data) %in% c("sims_1", "sims_5",
"sims_9", "sims_13")])
data$sims_ident_reg <- rowMeans(data[,names(data) %in% c("sims_2", "sims_6",
"sims_10", "sims_14")])
data$sims_ext_reg <- rowMeans(data[,names(data) %in% c("sims_3", "sims_7",
"sims_11", "sims_15")])
data$sims_amot <- rowMeans(data[,names(data) %in% c("sims_4", "sims_8",
"sims_12", "sims_16")])
#------------ anxiety ---------------
# weightsfor each answer:
# first number "not at all", second number "somewhat",
# thrid number "moderately", forth number "very much"
item1 <- c(2.66, 0.60, -1.41, -3.55)
item2 <- c(-2.9, -0.76, 1.25, 3.31)
item3 <- c(-1.27, 0.87, 2.88, 4.94)
item4 <- c(4.09, 0.01, -2.00, -4.14)
item5 <- c(2.25, 0.19, -1.82,-3.96)
item6 <- c(-2.95, -0.81, 1.2, 3.26)
# weights according to the answers
data$stai_1_weight <- item1[data[,c("stai_1")]]
data$stai_2_weight <- item2[data[,c("stai_2")]]
data$stai_3_weight <- item3[data[,c("stai_3")]]
data$stai_4_weight <- item4[data[,c("stai_4")]]
data$stai_5_weight <- item5[data[,c("stai_5")]]
data$stai_6_weight <- item6[data[,c("stai_6")]]
# get stai-y value
stai_columns <- grep("stai_[1-6]?", colnames(data), value = TRUE)
stai_weight_columns <- grep("stai_[1-6]?_weight", colnames(data), value = TRUE)
data$stai <- rowMeans(data[,names(data) %in% stai_weight_columns])
#------------ write external table with relevant data ---------------
write.table(data[,!names(data) %in% c(ngse_columns, sims_columns,
stai_columns, stai_weight_columns)],
"dataGenderPreProcessed.txt", quote = FALSE,
sep = "\t", row.names = FALSE)
se <- function(x){
return(sd(x)/sqrt(length(x)))
}
## ------------ read in data set ---------------
dat_gender_All <-
read.table("dataGenderPreProcessed.txt",
header = TRUE,
sep = "\t")
## ------------ remove data ---------------
# number of participants (each has 3 data sets)
length(dat_gender_All$id) / 3
# remove others
dat_gender_without_other <-
dat_gender_All[dat_gender_All$gender != "other", ]
# number of participants (each has 3 data sets)
length(dat_gender_without_other$id) / 3
# remove lines with less than 25% of correct answers
## remove complete participant or only the condition?
remove_id <-
dat_gender_without_other$id[dat_gender_without_other$percentage_correct < 0.25]
dat_gender <-
dat_gender_without_other[!dat_gender_without_other$id %in% remove_id, ]
# number of participants (each has 3 data sets)
length(dat_gender$id) / 3
# convert gender and gamifiedElement to factor
dat_gender$gender <- factor(dat_gender$gender)
dat_gender$gamifiedElement <- factor(dat_gender$gamifiedElement,
levels = c("none", "p", "b", "l", "a",
"n", "pbla", "pblan"))
# Umbenennen der Faktoren für 'gamifiedElement'
levels(dat_gender$gamifiedElement) <- c("None", "Points (P)", "Badges (B)", "Leaderboards (L)", "Avatars (A)", "Narrative Content (N)", "Combination (PBLA)", "All Elements (PBLAN)")
dat_gender$id <- factor(dat_gender$id)
dat_gender$round <- factor(dat_gender$round)
aggregate(percentage_correct ~ gender, dat_gender, mean)
aggregate(percentage_correct ~ gamifiedElement, dat_gender, mean)
aggregate(percentage_correct ~ gender + gamifiedElement, dat_gender, mean)
# Lade benötigte Bibliotheken
library(dplyr)
library(ggplot2)
library(cowplot)
# Funktion zur Berechnung von Statistiken
calculate_stats <- function(data, group_variables, value_variable) {
data %>%
group_by(across(all_of(group_variables))) %>%
summarise(
Mean = mean({{ value_variable }}, na.rm = TRUE),
Median = median({{ value_variable }}, na.rm = TRUE),
Q1 = quantile({{ value_variable }}, 0.25, na.rm = TRUE),
Q3 = quantile({{ value_variable }}, 0.75, na.rm = TRUE),
IQR = IQR({{ value_variable }}, na.rm = TRUE),
SE = sd({{ value_variable }}, na.rm = TRUE) / sqrt(n()),
Min = min({{ value_variable }}, na.rm = TRUE),
Max = max({{ value_variable }}, na.rm = TRUE),
Lower = max(Min, Median - 1.5 * IQR), # Berechnung des unteren Whisker, wobei Min die untere Grenze ist
Upper = min(Max, Median + 1.5 * IQR), # Berechnung des oberen Whisker, wobei Max die obere Grenze ist
.groups = 'drop'
)
}
# Funktion zur Anpassung der Legendenbeschriftung
capitalize_labels <- function(labels) {
sapply(labels, function(label) {
paste(toupper(substring(label, 1, 1)), substring(label, 2), sep = "")
})
}
# Funktion zum Erstellen von Boxplots mit horizontalen Whisker-Linien
plot_data <- function(data, xlab, ylab, by_gender = FALSE) {
if (by_gender) {
p <- ggplot(data, aes(x = gamifiedElement, y = Mean, fill = gender)) +
geom_boxplot(aes(lower = Q1, upper = Q3, middle = Median, ymin = Lower, ymax = Upper),
stat = "identity", color = "black", position = position_dodge(width = 0.8), width = 0.7) +
geom_errorbar(aes(ymin = Lower, ymax = Upper, width = 0.5),
position = position_dodge(width = 0.8)) +
labs(x = xlab, y = ylab) +
theme_minimal(base_family = "Arial") +
guides(fill = guide_legend(title = "Gender", label.position = "right",
labels = capitalize_labels)) +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = 25),
axis.text.x = element_text(angle = -45, hjust = 0, vjust = 0, size = 22),
axis.text.y = element_text(size = 25),
axis.title.x = element_text(size = 25, margin = margin(t = 20)),
axis.title.y = element_text(size = 25, margin = margin(r = 20)),
legend.title = element_text(size = 25),
legend.text = element_text(size = 25),
plot.margin = margin(t = 20, r = 20, b = 20, l = 20)
)+
scale_fill_manual(values = gray.colors(length(unique(data$gender)), start = 0.8, end = 0.2), labels = capitalize_labels)
} else {
p <- ggplot(data, aes(x = gamifiedElement, y = Mean, fill = "color")) +
geom_boxplot(aes(lower = Q1, upper = Q3, middle = Median, ymin = Lower, ymax = Upper),
stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
geom_errorbar(aes(ymin = Lower, ymax = Upper, width = 0.5),
position = position_dodge(width = 0.8)) +
scale_fill_manual(values = c("color" = "#aaaaaa")) +
labs(x = xlab, y = ylab) +
theme_minimal(base_family = "Arial") +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = 25),
axis.text.x = element_text(angle = -45, hjust = 0, vjust = 0, size = 22),
axis.text.y = element_text(size = 25),
axis.title.x = element_text(size = 25, margin = margin(t = 20)),
axis.title.y = element_text(size = 25, margin = margin(r = 20)),
legend.position = "none",
plot.margin = margin(t = 20, r = 140, b = 20, l = 20)
)
}
# Achsen spiegeln, wenn negative Werte vorhanden sind
#if (any(data$Mean < 0)) {
#  p <- p + scale_y_reverse()
#}
return(p)
}
# Globale Variable für den Speicherpfad
#output_folder <<- "C:\\Users\\robin\\Documents\\GitHub\\bachelor-thesis\\img\\plots\\color"
output_folder <<- "D:\\Dokumente\\GitHub\\bachelor-thesis\\img\\plots\\grey"
# Funktion zum Speichern von Plots mit Ordnerauswahl
save_ggplot <- function(plot, plot_name) {
if (!dir.exists(output_folder)) {
dir.create(output_folder)
}
file_path <- file.path(output_folder, paste0(plot_name, ".png"))
ggsave(file_path, plot, height=20, width =30, units ="cm", dpi=800, bg="transparent")
}
# Hauptdatensatz
#dat_gender <- read.csv("your_data.csv")  # Pfad zur Datendatei anpassen
# Datenverarbeitung
agg_data_performance_gender <- calculate_stats(dat_gender, c("gender", "gamifiedElement"), percentage_correct)
agg_data_anxiety_gender <- calculate_stats(dat_gender, c("gender", "gamifiedElement"), stai)
agg_data_performance <- calculate_stats(dat_gender, "gamifiedElement", percentage_correct)
agg_data_anxiety <- calculate_stats(dat_gender, "gamifiedElement", stai)
agg_data_performance_gender_no_ge <- calculate_stats(dat_gender, "gender", percentage_correct)
# Daten visualisieren
plot_performance_gender <- plot_data(agg_data_performance_gender, "Gamified Element", "Average correct answers", TRUE)
plot_anxiety_gender <- plot_data(agg_data_anxiety_gender, "Gamified Element", "Average anxiety level", TRUE)
plot_performance <- plot_data(agg_data_performance, "Gamified Element", "Average correct answers")
plot_anxiety <- plot_data(agg_data_anxiety, "Gamified Element", "Average anxiety level")
# Diagramme anzeigen
#print(plot_performance_gender)
#print(plot_anxiety_gender)
#print(plot_performance)
#print(plot_anxiety)
# Diagramme speichern
save_ggplot(plot_performance_gender, "plot_performance_gender")
save_ggplot(plot_anxiety_gender, "plot_anxiety_gender")
save_ggplot(plot_performance, "plot_performance")
save_ggplot(plot_anxiety, "plot_anxiety")
# Lade benötigte Bibliotheken
library(dplyr)
library(ggplot2)
library(cowplot)
# Funktion zur Berechnung von Statistiken
calculate_stats <- function(data, group_variables, value_variable) {
data %>%
group_by(across(all_of(group_variables))) %>%
summarise(
Mean = mean({{ value_variable }}, na.rm = TRUE),
Median = median({{ value_variable }}, na.rm = TRUE),
Q1 = quantile({{ value_variable }}, 0.25, na.rm = TRUE),
Q3 = quantile({{ value_variable }}, 0.75, na.rm = TRUE),
IQR = IQR({{ value_variable }}, na.rm = TRUE),
SE = sd({{ value_variable }}, na.rm = TRUE) / sqrt(n()),
Min = min({{ value_variable }}, na.rm = TRUE),
Max = max({{ value_variable }}, na.rm = TRUE),
Lower = max(Min, Median - 1.5 * IQR), # Berechnung des unteren Whisker, wobei Min die untere Grenze ist
Upper = min(Max, Median + 1.5 * IQR), # Berechnung des oberen Whisker, wobei Max die obere Grenze ist
.groups = 'drop'
)
}
# Funktion zur Anpassung der Legendenbeschriftung
capitalize_labels <- function(labels) {
sapply(labels, function(label) {
paste(toupper(substring(label, 1, 1)), substring(label, 2), sep = "")
})
}
# Funktion zum Erstellen von Boxplots mit horizontalen Whisker-Linien
plot_data <- function(data, xlab, ylab, by_gender = FALSE) {
if (by_gender) {
p <- ggplot(data, aes(x = gamifiedElement, y = Mean, fill = gender)) +
geom_boxplot(aes(lower = Q1, upper = Q3, middle = Median, ymin = Lower, ymax = Upper),
stat = "identity", color = "black", position = position_dodge(width = 0.8), width = 0.7) +
geom_errorbar(aes(ymin = Lower, ymax = Upper, width = 0.5),
position = position_dodge(width = 0.8)) +
labs(x = xlab, y = ylab) +
theme_minimal(base_family = "Arial") +
guides(fill = guide_legend(title = "Gender", label.position = "right",
labels = capitalize_labels)) +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = 25),
axis.text.x = element_text(angle = -45, hjust = 0, vjust = 0, size = 22),
axis.text.y = element_text(size = 25),
axis.title.x = element_text(size = 25, margin = margin(t = 20)),
axis.title.y = element_text(size = 25, margin = margin(r = 20)),
legend.title = element_text(size = 25),
legend.text = element_text(size = 25),
plot.margin = margin(t = 20, r = 20, b = 20, l = 20)
)+
scale_y_continuous(labels = scales::comma, limits = c(floor(min(data$Min)), ceiling(max(data$Max))))+
scale_fill_manual(values = gray.colors(length(unique(data$gender)), start = 0.8, end = 0.2), labels = capitalize_labels)
} else {
p <- ggplot(data, aes(x = gamifiedElement, y = Mean, fill = "color")) +
geom_boxplot(aes(lower = Q1, upper = Q3, middle = Median, ymin = Lower, ymax = Upper),
stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
geom_errorbar(aes(ymin = Lower, ymax = Upper, width = 0.5),
position = position_dodge(width = 0.8)) +
scale_fill_manual(values = c("color" = "#aaaaaa")) +
labs(x = xlab, y = ylab) +
theme_minimal(base_family = "Arial") +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = 25),
axis.text.x = element_text(angle = -45, hjust = 0, vjust = 0, size = 22),
axis.text.y = element_text(size = 25),
axis.title.x = element_text(size = 25, margin = margin(t = 20)),
axis.title.y = element_text(size = 25, margin = margin(r = 20)),
legend.position = "none",
plot.margin = margin(t = 20, r = 140, b = 20, l = 20)
)
}
# Achsen spiegeln, wenn negative Werte vorhanden sind
#if (any(data$Mean < 0)) {
#  p <- p + scale_y_reverse()
#}
return(p)
}
# Globale Variable für den Speicherpfad
#output_folder <<- "C:\\Users\\robin\\Documents\\GitHub\\bachelor-thesis\\img\\plots\\color"
output_folder <<- "D:\\Dokumente\\GitHub\\bachelor-thesis\\img\\plots\\grey"
# Funktion zum Speichern von Plots mit Ordnerauswahl
save_ggplot <- function(plot, plot_name) {
if (!dir.exists(output_folder)) {
dir.create(output_folder)
}
file_path <- file.path(output_folder, paste0(plot_name, ".png"))
ggsave(file_path, plot, height=20, width =30, units ="cm", dpi=800, bg="transparent")
}
# Hauptdatensatz
#dat_gender <- read.csv("your_data.csv")  # Pfad zur Datendatei anpassen
# Datenverarbeitung
agg_data_performance_gender <- calculate_stats(dat_gender, c("gender", "gamifiedElement"), percentage_correct)
agg_data_anxiety_gender <- calculate_stats(dat_gender, c("gender", "gamifiedElement"), stai)
agg_data_performance <- calculate_stats(dat_gender, "gamifiedElement", percentage_correct)
agg_data_anxiety <- calculate_stats(dat_gender, "gamifiedElement", stai)
agg_data_performance_gender_no_ge <- calculate_stats(dat_gender, "gender", percentage_correct)
# Daten visualisieren
plot_performance_gender <- plot_data(agg_data_performance_gender, "Gamified Element", "Average correct answers", TRUE)
plot_anxiety_gender <- plot_data(agg_data_anxiety_gender, "Gamified Element", "Average anxiety level", TRUE)
plot_performance <- plot_data(agg_data_performance, "Gamified Element", "Average correct answers")
plot_anxiety <- plot_data(agg_data_anxiety, "Gamified Element", "Average anxiety level")
# Diagramme anzeigen
#print(plot_performance_gender)
#print(plot_anxiety_gender)
#print(plot_performance)
#print(plot_anxiety)
# Diagramme speichern
save_ggplot(plot_performance_gender, "plot_performance_gender")
save_ggplot(plot_anxiety_gender, "plot_anxiety_gender")
save_ggplot(plot_performance, "plot_performance")
save_ggplot(plot_anxiety, "plot_anxiety")
# Lade benötigte Bibliotheken
library(dplyr)
library(ggplot2)
library(cowplot)
# Funktion zur Berechnung von Statistiken
calculate_stats <- function(data, group_variables, value_variable) {
data %>%
group_by(across(all_of(group_variables))) %>%
summarise(
Mean = mean({{ value_variable }}, na.rm = TRUE),
Median = median({{ value_variable }}, na.rm = TRUE),
Q1 = quantile({{ value_variable }}, 0.25, na.rm = TRUE),
Q3 = quantile({{ value_variable }}, 0.75, na.rm = TRUE),
IQR = IQR({{ value_variable }}, na.rm = TRUE),
SE = sd({{ value_variable }}, na.rm = TRUE) / sqrt(n()),
Min = min({{ value_variable }}, na.rm = TRUE),
Max = max({{ value_variable }}, na.rm = TRUE),
Lower = max(Min, Median - 1.5 * IQR), # Berechnung des unteren Whisker, wobei Min die untere Grenze ist
Upper = min(Max, Median + 1.5 * IQR), # Berechnung des oberen Whisker, wobei Max die obere Grenze ist
.groups = 'drop'
)
}
# Funktion zur Anpassung der Legendenbeschriftung
capitalize_labels <- function(labels) {
sapply(labels, function(label) {
paste(toupper(substring(label, 1, 1)), substring(label, 2), sep = "")
})
}
# Funktion zum Erstellen von Boxplots mit horizontalen Whisker-Linien
plot_data <- function(data, xlab, ylab, by_gender = FALSE) {
if (by_gender) {
p <- ggplot(data, aes(x = gamifiedElement, y = Mean, fill = gender)) +
geom_boxplot(aes(lower = Q1, upper = Q3, middle = Median, ymin = Lower, ymax = Upper),
stat = "identity", color = "black", position = position_dodge(width = 0.8), width = 0.7) +
geom_errorbar(aes(ymin = Lower, ymax = Upper, width = 0.5),
position = position_dodge(width = 0.8)) +
labs(x = xlab, y = ylab) +
theme_minimal(base_family = "Arial") +
guides(fill = guide_legend(title = "Gender", label.position = "right",
labels = capitalize_labels)) +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = 25),
axis.text.x = element_text(angle = -45, hjust = 0, vjust = 0, size = 22),
axis.text.y = element_text(size = 25),
axis.title.x = element_text(size = 25, margin = margin(t = 20)),
axis.title.y = element_text(size = 25, margin = margin(r = 20)),
legend.title = element_text(size = 25),
legend.text = element_text(size = 25),
plot.margin = margin(t = 20, r = 20, b = 20, l = 20)
)+
scale_y_continuous(labels = scales::comma, limits = c(floor(min(data$Min)), ceiling(max(data$Max))))+
scale_fill_manual(values = gray.colors(length(unique(data$gender)), start = 0.8, end = 0.2), labels = capitalize_labels)
} else {
p <- ggplot(data, aes(x = gamifiedElement, y = Mean, fill = "color")) +
geom_boxplot(aes(lower = Q1, upper = Q3, middle = Median, ymin = Lower, ymax = Upper),
stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
geom_errorbar(aes(ymin = Lower, ymax = Upper, width = 0.5),
position = position_dodge(width = 0.8)) +
scale_fill_manual(values = c("color" = "#aaaaaa")) +
labs(x = xlab, y = ylab) +
theme_minimal(base_family = "Arial") +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = 25),
axis.text.x = element_text(angle = -45, hjust = 0, vjust = 0, size = 22),
axis.text.y = element_text(size = 25),
axis.title.x = element_text(size = 25, margin = margin(t = 20)),
axis.title.y = element_text(size = 25, margin = margin(r = 20)),
legend.position = "none",
plot.margin = margin(t = 20, r = 140, b = 20, l = 20)
)+
scale_y_continuous(labels = scales::comma, limits = c(floor(min(data$Min)), ceiling(max(data$Max))))+
}
# Lade benötigte Bibliotheken
library(dplyr)
library(ggplot2)
library(cowplot)
# Funktion zur Berechnung von Statistiken
calculate_stats <- function(data, group_variables, value_variable) {
data %>%
group_by(across(all_of(group_variables))) %>%
summarise(
Mean = mean({{ value_variable }}, na.rm = TRUE),
Median = median({{ value_variable }}, na.rm = TRUE),
Q1 = quantile({{ value_variable }}, 0.25, na.rm = TRUE),
Q3 = quantile({{ value_variable }}, 0.75, na.rm = TRUE),
IQR = IQR({{ value_variable }}, na.rm = TRUE),
SE = sd({{ value_variable }}, na.rm = TRUE) / sqrt(n()),
Min = min({{ value_variable }}, na.rm = TRUE),
Max = max({{ value_variable }}, na.rm = TRUE),
Lower = max(Min, Median - 1.5 * IQR), # Berechnung des unteren Whisker, wobei Min die untere Grenze ist
Upper = min(Max, Median + 1.5 * IQR), # Berechnung des oberen Whisker, wobei Max die obere Grenze ist
.groups = 'drop'
)
}
# Funktion zur Anpassung der Legendenbeschriftung
capitalize_labels <- function(labels) {
sapply(labels, function(label) {
paste(toupper(substring(label, 1, 1)), substring(label, 2), sep = "")
})
}
# Funktion zum Erstellen von Boxplots mit horizontalen Whisker-Linien
plot_data <- function(data, xlab, ylab, by_gender = FALSE) {
if (by_gender) {
p <- ggplot(data, aes(x = gamifiedElement, y = Mean, fill = gender)) +
geom_boxplot(aes(lower = Q1, upper = Q3, middle = Median, ymin = Lower, ymax = Upper),
stat = "identity", color = "black", position = position_dodge(width = 0.8), width = 0.7) +
geom_errorbar(aes(ymin = Lower, ymax = Upper, width = 0.5),
position = position_dodge(width = 0.8)) +
labs(x = xlab, y = ylab) +
theme_minimal(base_family = "Arial") +
guides(fill = guide_legend(title = "Gender", label.position = "right",
labels = capitalize_labels)) +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = 25),
axis.text.x = element_text(angle = -45, hjust = 0, vjust = 0, size = 22),
axis.text.y = element_text(size = 25),
axis.title.x = element_text(size = 25, margin = margin(t = 20)),
axis.title.y = element_text(size = 25, margin = margin(r = 20)),
legend.title = element_text(size = 25),
legend.text = element_text(size = 25),
plot.margin = margin(t = 20, r = 20, b = 20, l = 20)
)+
scale_y_continuous(labels = scales::comma, limits = c(floor(min(data$Min)), ceiling(max(data$Max))))+
scale_fill_manual(values = gray.colors(length(unique(data$gender)), start = 0.8, end = 0.2), labels = capitalize_labels)
} else {
p <- ggplot(data, aes(x = gamifiedElement, y = Mean, fill = "color")) +
geom_boxplot(aes(lower = Q1, upper = Q3, middle = Median, ymin = Lower, ymax = Upper),
stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
geom_errorbar(aes(ymin = Lower, ymax = Upper, width = 0.5),
position = position_dodge(width = 0.8)) +
scale_fill_manual(values = c("color" = "#aaaaaa")) +
labs(x = xlab, y = ylab) +
theme_minimal(base_family = "Arial") +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = 25),
axis.text.x = element_text(angle = -45, hjust = 0, vjust = 0, size = 22),
axis.text.y = element_text(size = 25),
axis.title.x = element_text(size = 25, margin = margin(t = 20)),
axis.title.y = element_text(size = 25, margin = margin(r = 20)),
legend.position = "none",
plot.margin = margin(t = 20, r = 140, b = 20, l = 20)
)+
scale_y_continuous(labels = scales::comma, limits = c(floor(min(data$Min)), ceiling(max(data$Max))))
}
# Achsen spiegeln, wenn negative Werte vorhanden sind
#if (any(data$Mean < 0)) {
#  p <- p + scale_y_reverse()
#}
return(p)
}
# Globale Variable für den Speicherpfad
#output_folder <<- "C:\\Users\\robin\\Documents\\GitHub\\bachelor-thesis\\img\\plots\\color"
output_folder <<- "D:\\Dokumente\\GitHub\\bachelor-thesis\\img\\plots\\grey"
# Funktion zum Speichern von Plots mit Ordnerauswahl
save_ggplot <- function(plot, plot_name) {
if (!dir.exists(output_folder)) {
dir.create(output_folder)
}
file_path <- file.path(output_folder, paste0(plot_name, ".png"))
ggsave(file_path, plot, height=20, width =30, units ="cm", dpi=800, bg="transparent")
}
# Hauptdatensatz
#dat_gender <- read.csv("your_data.csv")  # Pfad zur Datendatei anpassen
# Datenverarbeitung
agg_data_performance_gender <- calculate_stats(dat_gender, c("gender", "gamifiedElement"), percentage_correct)
agg_data_anxiety_gender <- calculate_stats(dat_gender, c("gender", "gamifiedElement"), stai)
agg_data_performance <- calculate_stats(dat_gender, "gamifiedElement", percentage_correct)
agg_data_anxiety <- calculate_stats(dat_gender, "gamifiedElement", stai)
agg_data_performance_gender_no_ge <- calculate_stats(dat_gender, "gender", percentage_correct)
# Daten visualisieren
plot_performance_gender <- plot_data(agg_data_performance_gender, "Gamified Element", "Average correct answers", TRUE)
plot_anxiety_gender <- plot_data(agg_data_anxiety_gender, "Gamified Element", "Average anxiety level", TRUE)
plot_performance <- plot_data(agg_data_performance, "Gamified Element", "Average correct answers")
plot_anxiety <- plot_data(agg_data_anxiety, "Gamified Element", "Average anxiety level")
# Diagramme anzeigen
#print(plot_performance_gender)
#print(plot_anxiety_gender)
#print(plot_performance)
#print(plot_anxiety)
# Diagramme speichern
save_ggplot(plot_performance_gender, "plot_performance_gender")
save_ggplot(plot_anxiety_gender, "plot_anxiety_gender")
save_ggplot(plot_performance, "plot_performance")
save_ggplot(plot_anxiety, "plot_anxiety")
