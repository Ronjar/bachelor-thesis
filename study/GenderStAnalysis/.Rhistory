## Script name: dataPreProcessing.R
##
## Author: Nadine N. Koch
##
## Date Created: 04.07.2024
## ---------------------------
##
## Input: "dat_gender" from Analysis.r, considering each person has three entries
##
##
## Output: Console summary of demographics and study programs
##
## ---------------------------
## necessary packages
library(dplyr)
## ------------ optional: set working directory ---------------
# please fill in the directory of the scripts here
# please uncomment the following lines
# path <- "Documents/Lehre/Betreuung Arbeiten/Robin/"
# set working directory
# setwd(path)
## Use distinct records for each person to calculate age statistics
distinct_people <- dat_gender %>%
distinct(id, .keep_all = TRUE)  # Take the first occurrence to represent each person
## Calculate basic statistics for age
min_age <- min(distinct_people$age, na.rm = TRUE)
max_age <- max(distinct_people$age, na.rm = TRUE)
mean_age <- mean(distinct_people$age, na.rm = TRUE)
sd_age <- sd(distinct_people$age, na.rm = TRUE)
## Gender distribution
total_participants <- nrow(distinct_people)
## Gender distribution
gender_distribution <- distinct_people %>%
group_by(gender) %>%
summarise(Count = n(), Percentage = (Count / total_participants) * 100)
## Top three study programs
top_study_programs <- distinct_people %>%
group_by(studyProgram) %>%
summarise(Count = n()) %>%
arrange(desc(Count)) %>%
slice_head(n = 6)
## Print the summary in the console
output_text <- paste(
"Study Participants Summary:\n",
"Total Participants: ", nrow(distinct_people), "\n",
"Age Range: ", min_age, " to ", max_age, "\n",
"Average Age: ", format(mean_age, digits = 2), " (SD = ", format(sd_age, digits = 2), ")\n",
"Gender Distribution:\n",
paste(gender_distribution$gender, gender_distribution$Count, " (", format(gender_distribution$Percentage, digits = 2), "%)", collapse = ", "),
"\nTop Three Study Programs:\n",
paste(top_study_programs$studyProgram, top_study_programs$Count, collapse = ", "),
sep = ""
)
cat(output_text)
## ---------------------------
## Script name: dataPreProcessing.R
##
## Author: Nadine N. Koch
##
## Date Created: 04.07.2024
## ---------------------------
##
## Input: "dat_gender" from Analysis.r, considering each person has three entries
##
##
## Output: Console summary of demographics and study programs
##
## ---------------------------
## necessary packages
library(dplyr)
## ------------ optional: set working directory ---------------
# please fill in the directory of the scripts here
# please uncomment the following lines
# path <- "Documents/Lehre/Betreuung Arbeiten/Robin/"
# set working directory
# setwd(path)
## Use distinct records for each person to calculate age statistics
distinct_people <- dat_gender %>%
distinct(id, .keep_all = TRUE)  # Take the first occurrence to represent each person
## Calculate basic statistics for age
min_age <- min(distinct_people$age, na.rm = TRUE)
max_age <- max(distinct_people$age, na.rm = TRUE)
mean_age <- mean(distinct_people$age, na.rm = TRUE)
sd_age <- sd(distinct_people$age, na.rm = TRUE)
## Gender distribution
total_participants <- nrow(distinct_people)
## Gender distribution
gender_distribution <- distinct_people %>%
group_by(gender) %>%
summarise(Count = n(), Percentage = (Count / total_participants) * 100)
## Top three study programs
top_study_programs <- distinct_people %>%
group_by(studyProgram) %>%
summarise(Count = n()) %>%
arrange(desc(Count)) %>%
slice_head(n = 5)
## Print the summary in the console
output_text <- paste(
"Study Participants Summary:\n",
"Total Participants: ", nrow(distinct_people), "\n",
"Age Range: ", min_age, " to ", max_age, "\n",
"Average Age: ", format(mean_age, digits = 4), " (SD = ", format(sd_age, digits = 4), ")\n",
"Gender Distribution:\n",
paste(gender_distribution$gender, gender_distribution$Count, " (", format(gender_distribution$Percentage, digits = 2), "%)", collapse = ", "),
"\nTop Three Study Programs:\n",
paste(top_study_programs$studyProgram, top_study_programs$Count, collapse = ", "),
sep = ""
)
cat(output_text)
## Print the summary in the console
output_text <- paste(
"Study Participants Summary:\n",
"Total Participants: ", nrow(distinct_people), "\n",
"Age Range: ", min_age, " to ", max_age, "\n",
"Average Age: ", format(mean_age, digits = 4), " (SD = ", format(sd_age, digits = 4), ")\n",
"Gender Distribution:\n",
paste(gender_distribution$gender, gender_distribution$Count, " (", format(gender_distribution$Percentage, digits = 2), "%)", collapse = ", "),
"\nTop Three Study Programs:\n",
paste(top_study_programs$studyProgram, top_study_programs$Count, collapse = ",\n "),
sep = ""
)
cat(output_text)
## Print the summary in the console
output_text <- paste(
"Study Participants Summary:\n",
"Total Participants: ", nrow(distinct_people), "\n",
"Age Range: ", min_age, " to ", max_age, "\n",
"Average Age: ", format(mean_age, digits = 4), " (SD = ", format(sd_age, digits = 4), ")\n",
"Gender Distribution:\n",
paste(gender_distribution$gender, gender_distribution$Count, " (", format(gender_distribution$Percentage, digits = 2), "%)", collapse = ", "),
"\nTop Three Study Programs:\n  - ",
paste(top_study_programs$studyProgram, top_study_programs$Count, collapse = ",\n  - "),
sep = ""
)
cat(output_text)
## Print the summary in the console
output_text <- paste(
"Study Participants Summary:\n",
"Total Participants: ", nrow(distinct_people), "\n",
"Age Range: ", min_age, " to ", max_age, "\n",
"Average Age: ", format(mean_age, digits = 4), " (SD = ", format(sd_age, digits = 4), ")\n",
"Gender Distribution:\n",
paste(gender_distribution$gender, gender_distribution$Count, " (", format(gender_distribution$Percentage, digits = 4), "%)", collapse = ", "),
"\nTop Three Study Programs:\n  - ",
paste(top_study_programs$studyProgram, top_study_programs$Count, collapse = ",\n  - "),
sep = ""
)
cat(output_text)
# Lade benötigte Bibliotheken
library(dplyr)
library(ggplot2)
library(cowplot)
# Funktion zur Berechnung von Mittelwerten und Standardfehlern
calculate_stats <- function(data, group_variables, value_variable) {
data %>%
group_by(across(all_of(group_variables))) %>%
summarise(
Mean = mean({{ value_variable }}, na.rm = TRUE),
SE = sd({{ value_variable }}, na.rm = TRUE) / sqrt(n()),
.groups = 'drop'
)
}
# Funktion zum Erstellen von Balkendiagrammen
plot_data <- function(data, xlab, ylab, by_gender = FALSE) {
if (by_gender) {
ggplot(data, aes(x = gamifiedElement, y = Mean, fill = gender)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0.25, position = position_dodge(width = 0.8)) +
labs(x = xlab, y = ylab) +
ylim(0, 1) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = 25),  # Textgröße erhöhen
axis.text.x = element_text(angle = -45, hjust = 0, vjust = 0, size = 16),  # X-Achsenbeschriftung drehen
axis.text.y = element_text(size = 25),  # Y-Achsenbeschriftung Textgröße
axis.title.x = element_text(size = 25, margin = margin(t = 20)),  # X-Achsentitel Textgröße und Abstand
axis.title.y = element_text(size = 25, margin = margin(r = 20)),  # Y-Achsentitel Textgröße und Abstand
legend.title = element_text(size = 25),  # Legendentitel Textgröße
legend.text = element_text(size = 25),  # Legendeneinträge Textgröße
plot.margin = margin(t = 20, r = 20, b = 20, l = 20)  # Ränder hinzufügen
)
} else {
ggplot(data, aes(x = gamifiedElement, y = Mean, fill = "color")) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0.25, position = position_dodge(width = 0.7)) +
scale_fill_manual(values = c("color" = "#f8bc6d")) +
labs(x = xlab, y = ylab) +
ylim(0, 1) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = 25),  # Textgröße erhöhen
axis.text.x = element_text(angle = -45, hjust = 0, vjust = 0, size = 16),  # X-Achsenbeschriftung drehen
axis.text.y = element_text(size = 25),  # Y-Achsenbeschriftung Textgröße
axis.title.x = element_text(size = 25, margin = margin(t = 20)),  # X-Achsentitel Textgröße und Abstand
axis.title.y = element_text(size = 25, margin = margin(r = 20)),  # Y-Achsentitel Textgröße und Abstand
legend.position = "none",  # Legende entfernen
plot.margin = margin(t = 20, r = 100, b = 20, l = 20)  # Ränder hinzufügen
)
}
}
# Globale Variable für den Speicherpfad
output_folder <<- "C:\\Users\\robin\\Documents\\GitHub\\bachelor-thesis\\img\\plots\\2"
# Funktion zum Speichern von Plots mit Ordnerauswahl
save_ggplot <- function(plot, plot_name) {
if (!dir.exists(output_folder)) {
dir.create(output_folder)
}
file_path <- file.path(output_folder, paste0(plot_name, ".png"))
ggsave(file_path, plot, height=20, width =30, units ="cm", dpi=800, bg="white")
}
# Hauptdatensatz
#dat_gender <- read.csv("your_data.csv")  # Pfad zur Datendatei anpassen
# Datenverarbeitung
agg_data_performance_gender <- calculate_stats(dat_gender, c("gender", "gamifiedElement"), percentage_correct)
agg_data_anxiety_gender <- calculate_stats(dat_gender, c("gender", "gamifiedElement"), stai)
agg_data_performance <- calculate_stats(dat_gender, "gamifiedElement", percentage_correct)
agg_data_anxiety <- calculate_stats(dat_gender, "gamifiedElement", stai)
agg_data_performance_gender_no_ge <- calculate_stats(dat_gender, "gender", percentage_correct)
# Daten visualisieren
plot_performance_gender <- plot_data(agg_data_performance_gender, "Gamified Element", "Average percentage of correct answers", TRUE)
plot_anxiety_gender <- plot_data(agg_data_anxiety_gender, "Gamified Element", "Average anxiety level", TRUE)
plot_performance <- plot_data(agg_data_performance, "Gamified Element", "Average percentage of correct answers")
plot_anxiety <- plot_data(agg_data_anxiety, "Gamified Element", "Average anxiety level")
# Diagramme anzeigen
#print(plot_performance_gender)
#print(plot_anxiety_gender)
#print(plot_performance)
#print(plot_anxiety)
# Diagramme speichern
save_ggplot(plot_performance_gender, "plot_performance_gender")
save_ggplot(plot_anxiety_gender, "plot_anxiety_gender")
save_ggplot(plot_performance, "plot_performance")
save_ggplot(plot_anxiety, "plot_anxiety")
# Lade benötigte Bibliotheken
library(dplyr)
library(ggplot2)
library(cowplot)
# Funktion zur Berechnung von Mittelwerten und Standardfehlern
calculate_stats <- function(data, group_variables, value_variable) {
data %>%
group_by(across(all_of(group_variables))) %>%
summarise(
Mean = mean({{ value_variable }}, na.rm = TRUE),
SE = sd({{ value_variable }}, na.rm = TRUE) / sqrt(n()),
.groups = 'drop'
)
}
# Funktion zum Erstellen von Balkendiagrammen
plot_data <- function(data, xlab, ylab, by_gender = FALSE) {
if (by_gender) {
ggplot(data, aes(x = gamifiedElement, y = Mean, fill = gender)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0.25, position = position_dodge(width = 0.8)) +
labs(x = xlab, y = ylab) +
ylim(0, 1) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = 25),  # Textgröße erhöhen
axis.text.x = element_text(angle = -45, hjust = 0, vjust = 0, size = 25),  # X-Achsenbeschriftung drehen
axis.text.y = element_text(size = 25),  # Y-Achsenbeschriftung Textgröße
axis.title.x = element_text(size = 25, margin = margin(t = 20)),  # X-Achsentitel Textgröße und Abstand
axis.title.y = element_text(size = 25, margin = margin(r = 20)),  # Y-Achsentitel Textgröße und Abstand
legend.title = element_text(size = 25),  # Legendentitel Textgröße
legend.text = element_text(size = 25),  # Legendeneinträge Textgröße
plot.margin = margin(t = 20, r = 20, b = 20, l = 20)  # Ränder hinzufügen
)
} else {
ggplot(data, aes(x = gamifiedElement, y = Mean, fill = "color")) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0.25, position = position_dodge(width = 0.7)) +
scale_fill_manual(values = c("color" = "#f8bc6d")) +
labs(x = xlab, y = ylab) +
ylim(0, 1) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = 25),  # Textgröße erhöhen
axis.text.x = element_text(angle = -45, hjust = 0, vjust = 0, size = 25),  # X-Achsenbeschriftung drehen
axis.text.y = element_text(size = 25),  # Y-Achsenbeschriftung Textgröße
axis.title.x = element_text(size = 25, margin = margin(t = 20)),  # X-Achsentitel Textgröße und Abstand
axis.title.y = element_text(size = 25, margin = margin(r = 20)),  # Y-Achsentitel Textgröße und Abstand
legend.position = "none",  # Legende entfernen
plot.margin = margin(t = 20, r = 100, b = 20, l = 20)  # Ränder hinzufügen
)
}
}
# Globale Variable für den Speicherpfad
output_folder <<- "C:\\Users\\robin\\Documents\\GitHub\\bachelor-thesis\\img\\plots\\2"
# Funktion zum Speichern von Plots mit Ordnerauswahl
save_ggplot <- function(plot, plot_name) {
if (!dir.exists(output_folder)) {
dir.create(output_folder)
}
file_path <- file.path(output_folder, paste0(plot_name, ".png"))
ggsave(file_path, plot, height=20, width =30, units ="cm", dpi=800, bg="white")
}
# Hauptdatensatz
#dat_gender <- read.csv("your_data.csv")  # Pfad zur Datendatei anpassen
# Datenverarbeitung
agg_data_performance_gender <- calculate_stats(dat_gender, c("gender", "gamifiedElement"), percentage_correct)
agg_data_anxiety_gender <- calculate_stats(dat_gender, c("gender", "gamifiedElement"), stai)
agg_data_performance <- calculate_stats(dat_gender, "gamifiedElement", percentage_correct)
agg_data_anxiety <- calculate_stats(dat_gender, "gamifiedElement", stai)
agg_data_performance_gender_no_ge <- calculate_stats(dat_gender, "gender", percentage_correct)
# Daten visualisieren
plot_performance_gender <- plot_data(agg_data_performance_gender, "Gamified Element", "Average percentage of correct answers", TRUE)
plot_anxiety_gender <- plot_data(agg_data_anxiety_gender, "Gamified Element", "Average anxiety level", TRUE)
plot_performance <- plot_data(agg_data_performance, "Gamified Element", "Average percentage of correct answers")
plot_anxiety <- plot_data(agg_data_anxiety, "Gamified Element", "Average anxiety level")
# Diagramme anzeigen
#print(plot_performance_gender)
#print(plot_anxiety_gender)
#print(plot_performance)
#print(plot_anxiety)
# Diagramme speichern
save_ggplot(plot_performance_gender, "plot_performance_gender")
save_ggplot(plot_anxiety_gender, "plot_anxiety_gender")
save_ggplot(plot_performance, "plot_performance")
save_ggplot(plot_anxiety, "plot_anxiety")
# Lade benötigte Bibliotheken
library(dplyr)
library(ggplot2)
library(cowplot)
# Funktion zur Berechnung von Mittelwerten und Standardfehlern
calculate_stats <- function(data, group_variables, value_variable) {
data %>%
group_by(across(all_of(group_variables))) %>%
summarise(
Mean = mean({{ value_variable }}, na.rm = TRUE),
SE = sd({{ value_variable }}, na.rm = TRUE) / sqrt(n()),
.groups = 'drop'
)
}
# Funktion zum Erstellen von Balkendiagrammen
plot_data <- function(data, xlab, ylab, by_gender = FALSE) {
if (by_gender) {
ggplot(data, aes(x = gamifiedElement, y = Mean, fill = gender)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0.25, position = position_dodge(width = 0.8)) +
labs(x = xlab, y = ylab) +
ylim(0, 1) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = 25),  # Textgröße erhöhen
axis.text.x = element_text(angle = -45, hjust = 0, vjust = 0, size = 22),  # X-Achsenbeschriftung drehen
axis.text.y = element_text(size = 25),  # Y-Achsenbeschriftung Textgröße
axis.title.x = element_text(size = 25, margin = margin(t = 20)),  # X-Achsentitel Textgröße und Abstand
axis.title.y = element_text(size = 25, margin = margin(r = 20)),  # Y-Achsentitel Textgröße und Abstand
legend.title = element_text(size = 25),  # Legendentitel Textgröße
legend.text = element_text(size = 25),  # Legendeneinträge Textgröße
plot.margin = margin(t = 20, r = 20, b = 20, l = 20)  # Ränder hinzufügen
)
} else {
ggplot(data, aes(x = gamifiedElement, y = Mean, fill = "color")) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0.25, position = position_dodge(width = 0.7)) +
scale_fill_manual(values = c("color" = "#f8bc6d")) +
labs(x = xlab, y = ylab) +
ylim(0, 1) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = 25),  # Textgröße erhöhen
axis.text.x = element_text(angle = -45, hjust = 0, vjust = 0, size = 22),  # X-Achsenbeschriftung drehen
axis.text.y = element_text(size = 25),  # Y-Achsenbeschriftung Textgröße
axis.title.x = element_text(size = 25, margin = margin(t = 20)),  # X-Achsentitel Textgröße und Abstand
axis.title.y = element_text(size = 25, margin = margin(r = 20)),  # Y-Achsentitel Textgröße und Abstand
legend.position = "none",  # Legende entfernen
plot.margin = margin(t = 20, r = 100, b = 20, l = 20)  # Ränder hinzufügen
)
}
}
# Globale Variable für den Speicherpfad
output_folder <<- "C:\\Users\\robin\\Documents\\GitHub\\bachelor-thesis\\img\\plots\\2"
# Funktion zum Speichern von Plots mit Ordnerauswahl
save_ggplot <- function(plot, plot_name) {
if (!dir.exists(output_folder)) {
dir.create(output_folder)
}
file_path <- file.path(output_folder, paste0(plot_name, ".png"))
ggsave(file_path, plot, height=20, width =30, units ="cm", dpi=800, bg="white")
}
# Hauptdatensatz
#dat_gender <- read.csv("your_data.csv")  # Pfad zur Datendatei anpassen
# Datenverarbeitung
agg_data_performance_gender <- calculate_stats(dat_gender, c("gender", "gamifiedElement"), percentage_correct)
agg_data_anxiety_gender <- calculate_stats(dat_gender, c("gender", "gamifiedElement"), stai)
agg_data_performance <- calculate_stats(dat_gender, "gamifiedElement", percentage_correct)
agg_data_anxiety <- calculate_stats(dat_gender, "gamifiedElement", stai)
agg_data_performance_gender_no_ge <- calculate_stats(dat_gender, "gender", percentage_correct)
# Daten visualisieren
plot_performance_gender <- plot_data(agg_data_performance_gender, "Gamified Element", "Average percentage of correct answers", TRUE)
plot_anxiety_gender <- plot_data(agg_data_anxiety_gender, "Gamified Element", "Average anxiety level", TRUE)
plot_performance <- plot_data(agg_data_performance, "Gamified Element", "Average percentage of correct answers")
plot_anxiety <- plot_data(agg_data_anxiety, "Gamified Element", "Average anxiety level")
# Diagramme anzeigen
#print(plot_performance_gender)
#print(plot_anxiety_gender)
#print(plot_performance)
#print(plot_anxiety)
# Diagramme speichern
save_ggplot(plot_performance_gender, "plot_performance_gender")
save_ggplot(plot_anxiety_gender, "plot_anxiety_gender")
save_ggplot(plot_performance, "plot_performance")
save_ggplot(plot_anxiety, "plot_anxiety")
# Lade benötigte Bibliotheken
library(dplyr)
library(ggplot2)
library(cowplot)
# Funktion zur Berechnung von Mittelwerten und Standardfehlern
calculate_stats <- function(data, group_variables, value_variable) {
data %>%
group_by(across(all_of(group_variables))) %>%
summarise(
Mean = mean({{ value_variable }}, na.rm = TRUE),
SE = sd({{ value_variable }}, na.rm = TRUE) / sqrt(n()),
.groups = 'drop'
)
}
# Funktion zum Erstellen von Balkendiagrammen
plot_data <- function(data, xlab, ylab, by_gender = FALSE) {
if (by_gender) {
ggplot(data, aes(x = gamifiedElement, y = Mean, fill = gender)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0.25, position = position_dodge(width = 0.8)) +
labs(x = xlab, y = ylab) +
ylim(0, 1) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = 25),  # Textgröße erhöhen
axis.text.x = element_text(angle = -45, hjust = 0, vjust = 0, size = 22),  # X-Achsenbeschriftung drehen
axis.text.y = element_text(size = 25),  # Y-Achsenbeschriftung Textgröße
axis.title.x = element_text(size = 25, margin = margin(t = 20)),  # X-Achsentitel Textgröße und Abstand
axis.title.y = element_text(size = 25, margin = margin(r = 20)),  # Y-Achsentitel Textgröße und Abstand
legend.title = element_text(size = 25),  # Legendentitel Textgröße
legend.text = element_text(size = 25),  # Legendeneinträge Textgröße
plot.margin = margin(t = 20, r = 20, b = 20, l = 20)  # Ränder hinzufügen
)
} else {
ggplot(data, aes(x = gamifiedElement, y = Mean, fill = "color")) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0.25, position = position_dodge(width = 0.7)) +
scale_fill_manual(values = c("color" = "#f8bc6d")) +
labs(x = xlab, y = ylab) +
ylim(0, 1) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(size = 25),  # Textgröße erhöhen
axis.text.x = element_text(angle = -45, hjust = 0, vjust = 0, size = 22),  # X-Achsenbeschriftung drehen
axis.text.y = element_text(size = 25),  # Y-Achsenbeschriftung Textgröße
axis.title.x = element_text(size = 25, margin = margin(t = 20)),  # X-Achsentitel Textgröße und Abstand
axis.title.y = element_text(size = 25, margin = margin(r = 20)),  # Y-Achsentitel Textgröße und Abstand
legend.position = "none",  # Legende entfernen
plot.margin = margin(t = 20, r = 140, b = 20, l = 20)  # Ränder hinzufügen
)
}
}
# Globale Variable für den Speicherpfad
output_folder <<- "C:\\Users\\robin\\Documents\\GitHub\\bachelor-thesis\\img\\plots\\2"
# Funktion zum Speichern von Plots mit Ordnerauswahl
save_ggplot <- function(plot, plot_name) {
if (!dir.exists(output_folder)) {
dir.create(output_folder)
}
file_path <- file.path(output_folder, paste0(plot_name, ".png"))
ggsave(file_path, plot, height=20, width =30, units ="cm", dpi=800, bg="white")
}
# Hauptdatensatz
#dat_gender <- read.csv("your_data.csv")  # Pfad zur Datendatei anpassen
# Datenverarbeitung
agg_data_performance_gender <- calculate_stats(dat_gender, c("gender", "gamifiedElement"), percentage_correct)
agg_data_anxiety_gender <- calculate_stats(dat_gender, c("gender", "gamifiedElement"), stai)
agg_data_performance <- calculate_stats(dat_gender, "gamifiedElement", percentage_correct)
agg_data_anxiety <- calculate_stats(dat_gender, "gamifiedElement", stai)
agg_data_performance_gender_no_ge <- calculate_stats(dat_gender, "gender", percentage_correct)
# Daten visualisieren
plot_performance_gender <- plot_data(agg_data_performance_gender, "Gamified Element", "Average correct answers", TRUE)
plot_anxiety_gender <- plot_data(agg_data_anxiety_gender, "Gamified Element", "Average anxiety level", TRUE)
plot_performance <- plot_data(agg_data_performance, "Gamified Element", "Average correct answers")
plot_anxiety <- plot_data(agg_data_anxiety, "Gamified Element", "Average anxiety level")
# Diagramme anzeigen
#print(plot_performance_gender)
#print(plot_anxiety_gender)
#print(plot_performance)
#print(plot_anxiety)
# Diagramme speichern
save_ggplot(plot_performance_gender, "plot_performance_gender")
save_ggplot(plot_anxiety_gender, "plot_anxiety_gender")
save_ggplot(plot_performance, "plot_performance")
save_ggplot(plot_anxiety, "plot_anxiety")
